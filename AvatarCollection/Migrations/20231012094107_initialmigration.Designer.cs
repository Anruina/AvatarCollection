// <auto-generated />
using System;
using AvatarCollection.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AvatarCollection.Migrations
{
    [DbContext(typeof(DataDbContext))]
    [Migration("20231012094107_initialmigration")]
    partial class initialmigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AvatarCollectionLibrary.Catalogue", b =>
                {
                    b.Property<int?>("CatalogueID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("CatalogueID"));

                    b.HasKey("CatalogueID");

                    b.ToTable("Catalogues");
                });

            modelBuilder.Entity("AvatarCollectionLibrary.Collectable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BlueRay")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CatalogueID")
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CollectableID")
                        .HasColumnType("int");

                    b.Property<string>("Comic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComicEdition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DVD")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FunkoPop")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Novel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OperatingSystem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PVC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Platform")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("DECIMAL(10,2)");

                    b.Property<string>("Releasedate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Worth")
                        .HasColumnType("DECIMAL(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("CatalogueID");

                    b.ToTable("Collectables");
                });

            modelBuilder.Entity("AvatarCollectionLibrary.MyCollection", b =>
                {
                    b.Property<int>("MyCollectionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MyCollectionID"));

                    b.Property<int?>("UsersUserID")
                        .HasColumnType("int");

                    b.HasKey("MyCollectionID");

                    b.HasIndex("UsersUserID");

                    b.ToTable("MyCollections");
                });

            modelBuilder.Entity("AvatarCollectionLibrary.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<string>("AuthenticationId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CollectableMyCollection", b =>
                {
                    b.Property<int>("CollectablesId")
                        .HasColumnType("int");

                    b.Property<int>("MyCollectionsMyCollectionID")
                        .HasColumnType("int");

                    b.HasKey("CollectablesId", "MyCollectionsMyCollectionID");

                    b.HasIndex("MyCollectionsMyCollectionID");

                    b.ToTable("CollectableMyCollection");
                });

            modelBuilder.Entity("AvatarCollectionLibrary.Collectable", b =>
                {
                    b.HasOne("AvatarCollectionLibrary.Catalogue", "Catalogue")
                        .WithMany("Collectables")
                        .HasForeignKey("CatalogueID");

                    b.Navigation("Catalogue");
                });

            modelBuilder.Entity("AvatarCollectionLibrary.MyCollection", b =>
                {
                    b.HasOne("AvatarCollectionLibrary.User", "Users")
                        .WithMany("MyCollections")
                        .HasForeignKey("UsersUserID");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("CollectableMyCollection", b =>
                {
                    b.HasOne("AvatarCollectionLibrary.Collectable", null)
                        .WithMany()
                        .HasForeignKey("CollectablesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AvatarCollectionLibrary.MyCollection", null)
                        .WithMany()
                        .HasForeignKey("MyCollectionsMyCollectionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AvatarCollectionLibrary.Catalogue", b =>
                {
                    b.Navigation("Collectables");
                });

            modelBuilder.Entity("AvatarCollectionLibrary.User", b =>
                {
                    b.Navigation("MyCollections");
                });
#pragma warning restore 612, 618
        }
    }
}
